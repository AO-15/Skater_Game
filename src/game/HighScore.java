/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author abdurahmanomar
 */
public class HighScore extends javax.swing.JPanel {

    /**
     * Creates new form HighScore
     */
    public HighScore() {
        initComponents();
//writeHighscore(Game.name, Skater.getCoinCount());
        readHighscore();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        highScore = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("High Scores");

        highScore.setBackground(new java.awt.Color(255, 102, 204));
        highScore.setColumns(20);
        highScore.setRows(5);
        jScrollPane1.setViewportView(highScore);

        jLabel3.setText("Name");

        jLabel4.setText("Coins");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(24, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea highScore;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    String fileName = "data/highScore.txt";
    ArrayList<String> names = new ArrayList<>();
    ArrayList<Integer> coins = new ArrayList<>();

    /**
     *Writes the high score to the specified file.
     * @param names
     * @param coins
     * @throws IOException
     */
    public void writeHighScore(String names, int coins) throws IOException {
        FileWriter writer = null;
        boolean append = true;
        try {
            writer = new FileWriter(fileName, append);
            writer.write(names + ":" + coins + "\n");
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    /**
     *method to read the high score from file.
     */
    public void readHighscore() {
        FileReader fr = null;
        BufferedReader reader = null;
        try {
            System.out.println("Reading " + fileName + " ...");
            fr = new FileReader(fileName);
            reader = new BufferedReader(fr);
            String line = reader.readLine();
            while (line != null) {
                // file is assumed to contain one name, score pair per line
                String[] lines = line.split(":");
                String name = lines[0];
                int coin = Integer.parseInt(lines[1]);
                names.add(name);
                coins.add(coin);
             //   System.out.println("Name: " + name + " - Coins: " + coins);
                line = reader.readLine();
            }
            System.out.println("...done.");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        
        sortHighScore(names, coins);

        for (int i = 0; i < names.size(); i++) {
            highScore.append(names.get(i) + ":" + Integer.toString(coins.get(i)) + "\n");
        }
    }

    /**
     * Sorts the high score into ascending order.
     * @param names is the users name.
     * @param coins is Number of collected coins.
     */
    public void sortHighScore(ArrayList<String> names, ArrayList<Integer> coins) {

        for (int i = 0; i < coins.size(); i++) {
            for (int j = 0; j < (coins.size() - i - 1); j++) {
                if (coins.get(j) < coins.get(j + 1)) {
                    int tempScore = coins.get(j + 1);
                    String tempName = names.get(j + 1);
                    coins.remove(j + 1);
                    names.remove(j + 1);
                    coins.add(j, tempScore);
                    names.add(j, tempName);
                }
            }
        }
    }

}
